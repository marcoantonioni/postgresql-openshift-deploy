

oc get templates -n openshift -o custom-columns=NAME:.metadata.name|grep -i ^postgres

#--------------------------------
# new namespace
TNS=test-postgres
oc delete project ${TNS}
sleep 1
while [ "Terminating" = ""$(oc get ns ${TNS} -o json | jq .status.phase -r) ]; do echo "wait deletion..."; sleep 1; done
oc new-project ${TNS}
while [ "Active" != ""$(oc get ns ${TNS} -o json | jq .status.phase -r) ]; do echo "wait activation..."; sleep 1; done

#---------------------------------
# save template locally
TEMPLATE=postgresql-persistent
TEMPLATE_TARGET_NAME=my-postgresql-template.yaml

oc get template -n openshift ${TEMPLATE} -o yaml > ./${TEMPLATE_TARGET_NAME}

#--------------------------------
# for each deployment
DEPLCFG_SUFFIX=-1
DEPLCFG_NAME=my-postgres-dc${DEPLCFG_SUFFIX}.yaml
TEMPLATE_VALUES=${TEMPLATE}${DEPLCFG_SUFFIX}-params.values
APP_NAME=my-postgresql${DEPLCFG_SUFFIX}

#--------------------------------
# set param values
MEM_LIMIT=2Gi
PG_DBNAME=mydb
PG_SCHEMA="schema1"
PG_USER=postgres
PG_PWD=post01gres
PG_VOL_SIZE=10Gi
PG_VER=latest


#------------------------------
# update template params values
oc process --parameters -f ./${TEMPLATE_TARGET_NAME} | grep -v NAME | awk '{print $1"="}' > ./${TEMPLATE_VALUES}
sed 's/MEMORY_LIMIT=/MEMORY_LIMIT='${MEM_LIMIT}'/g' -i ./${TEMPLATE_VALUES}
sed 's/POSTGRESQL_USER=/POSTGRESQL_USER='${PG_USER}'/g' -i ./${TEMPLATE_VALUES}
sed 's/POSTGRESQL_PASSWORD=/POSTGRESQL_PASSWORD='${PG_PWD}'/g' -i ./${TEMPLATE_VALUES}
sed 's/POSTGRESQL_DATABASE=/POSTGRESQL_DATABASE='${PG_DBNAME}'/g' -i ./${TEMPLATE_VALUES}
sed 's/VOLUME_CAPACITY=/VOLUME_CAPACITY='${PG_VOL_SIZE}'/g' -i ./${TEMPLATE_VALUES}
sed 's/POSTGRESQL_VERSION=/POSTGRESQL_VERSION='${PG_VER}'/g' -i ./${TEMPLATE_VALUES}

#------------------------------
# generate deploymentconfig
oc process -f ./${TEMPLATE_TARGET_NAME} --param-file=./${TEMPLATE_VALUES} -o yaml > ./${DEPLCFG_NAME}

#------------------------------
# update names from template
sed 's/claimName: postgresql$/claimName: '${APP_NAME}'/g' -i ./${DEPLCFG_NAME}
sed 's/name: postgresql$/name: '${APP_NAME}'/g' -i ./${DEPLCFG_NAME}
sed 's/- postgresql$/- '${APP_NAME}'/g' -i ./${DEPLCFG_NAME}
sed 's/expose-uri: postgres/expose-uri: '${APP_NAME}'/g' -i ./${DEPLCFG_NAME}
sed 's/name=="postgresql")].port/name=="'${APP_NAME}'")].port/g' -i ./${DEPLCFG_NAME}

#------------------------------
# set post hook for db creation
cat << EOF > rolling-strategy${DEPLCFG_SUFFIX}.yaml
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
        post:
          failurePolicy: ignore
          execNewPod:
            command:
              - /bin/sh
              - '-c'
              - >-
                echo 'Creating database ${PG_DBNAME}...' && 
                sleep 1 && 
                PGPASSWORD=${PG_PWD} psql -h ${APP_NAME} -U ${PG_USER} -c 'create database ${PG_DBNAME}' && 
                if [ "" != "${PG_SCHEMA}" ]; then echo "Creating schema ${PG_SCHEMA}..."; PGPASSWORD=${PG_PWD} psql -h ${APP_NAME} -U ${PG_USER} -d ${PG_DBNAME} -c 'create schema ${PG_SCHEMA}'; else echo "No schema"; fi &&
                echo 'done !'
            containerName: ${APP_NAME}
EOF

#------------------------------
# update rolling strategy
sed -i '/type: Recreate/r rolling-strategy'${DEPLCFG_SUFFIX}'.yaml' ./${DEPLCFG_NAME}
sed -i 's/type: Recreate//g' ./${DEPLCFG_NAME}

#------------------------------
# deploy dc
oc create -f ./${DEPLCFG_NAME}






#-----------------------
oc rollout latest ${APP_NAME}

oc get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.phase}{"\n"}{end}' | grep Running

# cat /var/lib/pgsql/data/userdata/log/



